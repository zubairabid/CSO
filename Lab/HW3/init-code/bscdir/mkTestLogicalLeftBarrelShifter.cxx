/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Thu Feb  1 23:00:32 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestLogicalLeftBarrelShifter.h"


/* String declarations */
static std::string const __str_literal_2("PASSED LEFT AND RIGHT", 21u);
static std::string const __str_literal_1("Shifter test failed:\n Input:    %b\n logical shifted right by %d\n Expected: %b\n DUT:      %b\n logical shifted left by %d\n Expected: %b\n DUT:      %b",
					 147u);


/* Constructor */
MOD_mkTestLogicalLeftBarrelShifter::MOD_mkTestLogicalLeftBarrelShifter(tSimStateHdl simHdl,
								       char const *name,
								       Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_counter(simHdl, "counter", this, 16u, 0u, (tUInt8)0u),
    INST_lfsr_r(simHdl, "lfsr_r", this, 32u, 1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 5u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestLogicalLeftBarrelShifter::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_RL_testShifter", SYM_DEF, &DEF_CAN_FIRE_RL_testShifter, 1u);
  init_symbol(&symbols[1u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[2u], "lfsr_r", SYM_MODULE, &INST_lfsr_r);
  init_symbol(&symbols[3u], "RL_testShifter", SYM_RULE);
  init_symbol(&symbols[4u], "WILL_FIRE_RL_testShifter", SYM_DEF, &DEF_WILL_FIRE_RL_testShifter, 1u);
}


/* Rule actions */

void MOD_mkTestLogicalLeftBarrelShifter::RL_testShifter()
{
  tUInt32 DEF_x__h25155;
  tUInt8 DEF_NOT_lfsr_r_SRL_lfsr_r_BITS_4_TO_0_8_9_EQ_IF_lf_ETC___d157;
  tUInt8 DEF_lfsr_r_BIT_0_OR_lfsr_r_BIT_1_2___d39;
  tUInt8 DEF_counter_58_EQ_65535___d159;
  tUInt32 DEF_logicalExpected__h199;
  tUInt32 DEF_logicalLeftDUT__h202;
  tUInt32 DEF_logicalLeftExpected__h201;
  tUInt8 DEF_IF_lfsr_r_BIT_0_THEN_lfsr_r_BIT_1_2_ELSE_lfsr__ETC___d40;
  tUInt32 DEF_num___1__h410;
  tUInt32 DEF_x__h126;
  tUInt32 DEF_num___1__h302;
  tUInt32 DEF_logicalDUT__h200;
  tUInt32 DEF_num___1__h383;
  tUInt32 DEF_num___1__h356;
  tUInt32 DEF_num___1__h329;
  tUInt32 DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107;
  tUInt8 DEF_lfsr_r_BIT_0___h172;
  tUInt8 DEF_lfsr_r_BIT_1___d22;
  tUInt8 DEF_lfsr_r_BIT_2___d21;
  tUInt8 DEF_lfsr_r_BIT_3___d20;
  tUInt8 DEF_lfsr_r_BIT_4___d11;
  tUInt8 DEF_lfsr_r_BIT_5___d8;
  tUInt8 DEF_lfsr_r_BIT_6___d7;
  tUInt8 DEF_lfsr_r_BIT_7___d4;
  tUInt8 DEF_lfsr_r_BIT_8___d42;
  tUInt8 DEF_lfsr_r_BIT_9___d43;
  tUInt8 DEF_lfsr_r_BIT_10___d45;
  tUInt8 DEF_lfsr_r_BIT_11___d46;
  tUInt8 DEF_lfsr_r_BIT_12___d47;
  tUInt8 DEF_lfsr_r_BIT_13___d48;
  tUInt8 DEF_lfsr_r_BIT_14___d50;
  tUInt8 DEF_lfsr_r_BIT_15___d51;
  tUInt8 DEF_lfsr_r_BIT_16___d52;
  tUInt8 DEF_lfsr_r_BIT_17___d53;
  tUInt8 DEF_lfsr_r_BIT_18___d55;
  tUInt8 DEF_lfsr_r_BIT_19___d56;
  tUInt8 DEF_lfsr_r_BIT_20___d57;
  tUInt8 DEF_lfsr_r_BIT_21___d58;
  tUInt8 DEF_lfsr_r_BIT_22___d60;
  tUInt8 DEF_lfsr_r_BIT_23___d61;
  tUInt8 DEF_lfsr_r_BIT_24___d62;
  tUInt8 DEF_lfsr_r_BIT_25___d63;
  tUInt8 DEF_lfsr_r_BIT_26___d65;
  tUInt8 DEF_lfsr_r_BIT_27___d66;
  tUInt8 DEF_lfsr_r_BIT_28___d67;
  tUInt8 DEF_lfsr_r_BIT_29___d68;
  tUInt8 DEF_lfsr_r_BIT_30___d70;
  tUInt8 DEF_shamt__h196;
  tUInt32 DEF_IF_lfsr_r_BIT_3_0_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d104;
  tUInt32 DEF_a__h305;
  tUInt32 DEF_IF_lfsr_r_BIT_2_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d101;
  tUInt32 DEF_a__h332;
  tUInt32 DEF_IF_lfsr_r_BIT_0_THEN_lfsr_r_BIT_2_1_CONCAT_lfs_ETC___d93;
  tUInt32 DEF_IF_lfsr_r_BIT_1_2_THEN_0_CONCAT_lfsr_r_BIT_0_O_ETC___d98;
  tUInt32 DEF_a__h359;
  tUInt32 DEF_a__h386;
  tUInt32 DEF_x__h25159;
  tUInt32 DEF_lfsr_r__h13443;
  DEF_lfsr_r__h13443 = INST_lfsr_r.METH_read();
  DEF_x__h25159 = INST_counter.METH_read();
  DEF_shamt__h196 = (tUInt8)((tUInt8)31u & DEF_lfsr_r__h13443);
  DEF_lfsr_r_BIT_30___d70 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 30u));
  DEF_lfsr_r_BIT_29___d68 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 29u));
  DEF_lfsr_r_BIT_27___d66 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 27u));
  DEF_lfsr_r_BIT_28___d67 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 28u));
  DEF_lfsr_r_BIT_26___d65 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 26u));
  DEF_lfsr_r_BIT_25___d63 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 25u));
  DEF_lfsr_r_BIT_24___d62 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 24u));
  DEF_lfsr_r_BIT_23___d61 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 23u));
  DEF_lfsr_r_BIT_22___d60 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 22u));
  DEF_lfsr_r_BIT_17___d53 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 17u));
  DEF_lfsr_r_BIT_21___d58 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 21u));
  DEF_lfsr_r_BIT_20___d57 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 20u));
  DEF_lfsr_r_BIT_19___d56 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 19u));
  DEF_lfsr_r_BIT_18___d55 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 18u));
  DEF_lfsr_r_BIT_16___d52 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 16u));
  DEF_lfsr_r_BIT_15___d51 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 15u));
  DEF_lfsr_r_BIT_14___d50 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 14u));
  DEF_lfsr_r_BIT_9___d43 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 9u));
  DEF_lfsr_r_BIT_13___d48 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 13u));
  DEF_lfsr_r_BIT_12___d47 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 12u));
  DEF_lfsr_r_BIT_11___d46 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 11u));
  DEF_lfsr_r_BIT_10___d45 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 10u));
  DEF_lfsr_r_BIT_8___d42 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 8u));
  DEF_lfsr_r_BIT_7___d4 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 7u));
  DEF_lfsr_r_BIT_6___d7 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 6u));
  DEF_lfsr_r_BIT_5___d8 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 5u));
  DEF_lfsr_r_BIT_4___d11 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 4u));
  DEF_lfsr_r_BIT_3___d20 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 3u));
  DEF_lfsr_r_BIT_2___d21 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 2u));
  DEF_lfsr_r_BIT_1___d22 = (tUInt8)((tUInt8)1u & (DEF_lfsr_r__h13443 >> 1u));
  DEF_lfsr_r_BIT_0___h172 = (tUInt8)((tUInt8)1u & DEF_lfsr_r__h13443);
  DEF_IF_lfsr_r_BIT_0_THEN_lfsr_r_BIT_2_1_CONCAT_lfs_ETC___d93 = DEF_lfsr_r_BIT_0___h172 ? 536870911u & (((((((((((((((((((((((((((((((tUInt32)(DEF_lfsr_r_BIT_2___d21)) << 28u) | (((tUInt32)(DEF_lfsr_r_BIT_3___d20)) << 27u)) | (((tUInt32)(DEF_lfsr_r_BIT_4___d11)) << 26u)) | (((tUInt32)(DEF_lfsr_r_BIT_5___d8)) << 25u)) | (((tUInt32)(DEF_lfsr_r_BIT_6___d7)) << 24u)) | (((tUInt32)(DEF_lfsr_r_BIT_7___d4)) << 23u)) | (((tUInt32)(DEF_lfsr_r_BIT_8___d42)) << 22u)) | (((tUInt32)(DEF_lfsr_r_BIT_9___d43)) << 21u)) | (((tUInt32)(DEF_lfsr_r_BIT_10___d45)) << 20u)) | (((tUInt32)(DEF_lfsr_r_BIT_11___d46)) << 19u)) | (((tUInt32)(DEF_lfsr_r_BIT_12___d47)) << 18u)) | (((tUInt32)(DEF_lfsr_r_BIT_13___d48)) << 17u)) | (((tUInt32)(DEF_lfsr_r_BIT_14___d50)) << 16u)) | (((tUInt32)(DEF_lfsr_r_BIT_15___d51)) << 15u)) | (((tUInt32)(DEF_lfsr_r_BIT_16___d52)) << 14u)) | (((tUInt32)(DEF_lfsr_r_BIT_17___d53)) << 13u)) | (((tUInt32)(DEF_lfsr_r_BIT_18___d55)) << 12u)) | (((tUInt32)(DEF_lfsr_r_BIT_19___d56)) << 11u)) | (((tUInt32)(DEF_lfsr_r_BIT_20___d57)) << 10u)) | (((tUInt32)(DEF_lfsr_r_BIT_21___d58)) << 9u)) | (((tUInt32)(DEF_lfsr_r_BIT_22___d60)) << 8u)) | (((tUInt32)(DEF_lfsr_r_BIT_23___d61)) << 7u)) | (((tUInt32)(DEF_lfsr_r_BIT_24___d62)) << 6u)) | (((tUInt32)(DEF_lfsr_r_BIT_25___d63)) << 5u)) | (((tUInt32)(DEF_lfsr_r_BIT_26___d65)) << 4u)) | (((tUInt32)(DEF_lfsr_r_BIT_27___d66)) << 3u)) | (((tUInt32)(DEF_lfsr_r_BIT_28___d67)) << 2u)) | (((tUInt32)(DEF_lfsr_r_BIT_29___d68)) << 1u)) | (tUInt32)(DEF_lfsr_r_BIT_30___d70)) : 536870911u & (((((((((((((((((((((((((((((((tUInt32)(DEF_lfsr_r_BIT_3___d20)) << 28u) | (((tUInt32)(DEF_lfsr_r_BIT_4___d11)) << 27u)) | (((tUInt32)(DEF_lfsr_r_BIT_5___d8)) << 26u)) | (((tUInt32)(DEF_lfsr_r_BIT_6___d7)) << 25u)) | (((tUInt32)(DEF_lfsr_r_BIT_7___d4)) << 24u)) | (((tUInt32)(DEF_lfsr_r_BIT_8___d42)) << 23u)) | (((tUInt32)(DEF_lfsr_r_BIT_9___d43)) << 22u)) | (((tUInt32)(DEF_lfsr_r_BIT_10___d45)) << 21u)) | (((tUInt32)(DEF_lfsr_r_BIT_11___d46)) << 20u)) | (((tUInt32)(DEF_lfsr_r_BIT_12___d47)) << 19u)) | (((tUInt32)(DEF_lfsr_r_BIT_13___d48)) << 18u)) | (((tUInt32)(DEF_lfsr_r_BIT_14___d50)) << 17u)) | (((tUInt32)(DEF_lfsr_r_BIT_15___d51)) << 16u)) | (((tUInt32)(DEF_lfsr_r_BIT_16___d52)) << 15u)) | (((tUInt32)(DEF_lfsr_r_BIT_17___d53)) << 14u)) | (((tUInt32)(DEF_lfsr_r_BIT_18___d55)) << 13u)) | (((tUInt32)(DEF_lfsr_r_BIT_19___d56)) << 12u)) | (((tUInt32)(DEF_lfsr_r_BIT_20___d57)) << 11u)) | (((tUInt32)(DEF_lfsr_r_BIT_21___d58)) << 10u)) | (((tUInt32)(DEF_lfsr_r_BIT_22___d60)) << 9u)) | (((tUInt32)(DEF_lfsr_r_BIT_23___d61)) << 8u)) | (((tUInt32)(DEF_lfsr_r_BIT_24___d62)) << 7u)) | (((tUInt32)(DEF_lfsr_r_BIT_25___d63)) << 6u)) | (((tUInt32)(DEF_lfsr_r_BIT_26___d65)) << 5u)) | (((tUInt32)(DEF_lfsr_r_BIT_27___d66)) << 4u)) | (((tUInt32)(DEF_lfsr_r_BIT_28___d67)) << 3u)) | (((tUInt32)(DEF_lfsr_r_BIT_29___d68)) << 2u)) | (((tUInt32)(DEF_lfsr_r_BIT_30___d70)) << 1u)) | (tUInt32)((tUInt8)(DEF_lfsr_r__h13443 >> 31u)));
  DEF_num___1__h410 = (((tUInt32)((tUInt8)0u)) << 31u) | (tUInt32)(DEF_lfsr_r__h13443 >> 1u);
  DEF_a__h386 = DEF_lfsr_r_BIT_0___h172 ? DEF_num___1__h410 : DEF_lfsr_r__h13443;
  DEF_num___1__h383 = (((tUInt32)((tUInt8)0u)) << 30u) | (tUInt32)(DEF_a__h386 >> 2u);
  DEF_a__h359 = DEF_lfsr_r_BIT_1___d22 ? DEF_num___1__h383 : DEF_a__h386;
  DEF_num___1__h356 = (((tUInt32)((tUInt8)0u)) << 28u) | (tUInt32)(DEF_a__h359 >> 4u);
  DEF_a__h332 = DEF_lfsr_r_BIT_2___d21 ? DEF_num___1__h356 : DEF_a__h359;
  DEF_num___1__h329 = (((tUInt32)((tUInt8)0u)) << 24u) | (tUInt32)(DEF_a__h332 >> 8u);
  DEF_a__h305 = DEF_lfsr_r_BIT_3___d20 ? DEF_num___1__h329 : DEF_a__h332;
  DEF_num___1__h302 = (tUInt32)(DEF_a__h305 >> 16u);
  DEF_logicalDUT__h200 = DEF_lfsr_r_BIT_4___d11 ? DEF_num___1__h302 : DEF_a__h305;
  DEF_x__h126 = DEF_lfsr_r_BIT_0___h172 ? ((((((((tUInt32)((tUInt8)1u)) << 31u) | (((tUInt32)(DEF_lfsr_r__h13443 >> 8u)) << 7u)) | (((tUInt32)((tUInt8)1u & ~DEF_lfsr_r_BIT_7___d4)) << 6u)) | (((tUInt32)(DEF_lfsr_r_BIT_6___d7)) << 5u)) | (((tUInt32)((tUInt8)1u & ~DEF_lfsr_r_BIT_5___d8)) << 4u)) | (((tUInt32)(DEF_lfsr_r_BIT_4___d11)) << 3u)) | (tUInt32)((tUInt8)7u & ~((tUInt8)((tUInt8)7u & (DEF_lfsr_r__h13443 >> 1u)))) : DEF_num___1__h410;
  DEF_IF_lfsr_r_BIT_0_THEN_lfsr_r_BIT_1_2_ELSE_lfsr__ETC___d40 = DEF_lfsr_r_BIT_0___h172 ? DEF_lfsr_r_BIT_1___d22 : DEF_lfsr_r_BIT_2___d21;
  DEF_logicalLeftExpected__h201 = primShiftL32(32u,
					       32u,
					       (tUInt32)(DEF_lfsr_r__h13443),
					       5u,
					       (tUInt8)(DEF_shamt__h196));
  DEF_logicalExpected__h199 = primShiftR32(32u,
					   32u,
					   (tUInt32)(DEF_lfsr_r__h13443),
					   5u,
					   (tUInt8)(DEF_shamt__h196));
  DEF_counter_58_EQ_65535___d159 = DEF_x__h25159 == 65535u;
  DEF_lfsr_r_BIT_0_OR_lfsr_r_BIT_1_2___d39 = DEF_lfsr_r_BIT_0___h172 || DEF_lfsr_r_BIT_1___d22;
  DEF_IF_lfsr_r_BIT_1_2_THEN_0_CONCAT_lfsr_r_BIT_0_O_ETC___d98 = DEF_lfsr_r_BIT_1___d22 ? 2147483647u & ((((((tUInt32)((tUInt8)0u)) << 29u) | (((tUInt32)(DEF_lfsr_r_BIT_0_OR_lfsr_r_BIT_1_2___d39)) << 28u)) | (((tUInt32)(DEF_IF_lfsr_r_BIT_0_THEN_lfsr_r_BIT_1_2_ELSE_lfsr__ETC___d40)) << 27u)) | (tUInt32)(DEF_IF_lfsr_r_BIT_0_THEN_lfsr_r_BIT_2_1_CONCAT_lfs_ETC___d93 >> 2u)) : 2147483647u & (((((tUInt32)(DEF_lfsr_r_BIT_0_OR_lfsr_r_BIT_1_2___d39)) << 30u) | (((tUInt32)(DEF_IF_lfsr_r_BIT_0_THEN_lfsr_r_BIT_1_2_ELSE_lfsr__ETC___d40)) << 29u)) | DEF_IF_lfsr_r_BIT_0_THEN_lfsr_r_BIT_2_1_CONCAT_lfs_ETC___d93);
  DEF_IF_lfsr_r_BIT_2_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d101 = DEF_lfsr_r_BIT_2___d21 ? 2147483647u & ((((tUInt32)((tUInt8)0u)) << 27u) | (tUInt32)(DEF_IF_lfsr_r_BIT_1_2_THEN_0_CONCAT_lfsr_r_BIT_0_O_ETC___d98 >> 4u)) : DEF_IF_lfsr_r_BIT_1_2_THEN_0_CONCAT_lfsr_r_BIT_0_O_ETC___d98;
  DEF_IF_lfsr_r_BIT_3_0_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d104 = DEF_lfsr_r_BIT_3___d20 ? 2147483647u & ((((tUInt32)((tUInt8)0u)) << 23u) | (tUInt32)(DEF_IF_lfsr_r_BIT_2_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d101 >> 8u)) : DEF_IF_lfsr_r_BIT_2_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d101;
  DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 = DEF_lfsr_r_BIT_4___d11 ? 2147483647u & ((tUInt32)(DEF_IF_lfsr_r_BIT_3_0_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d104 >> 16u)) : DEF_IF_lfsr_r_BIT_3_0_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d104;
  DEF_logicalLeftDUT__h202 = (((((((((((((((((((((((((((((((((tUInt32)((tUInt8)((tUInt8)1u & DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107))) << 31u) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 1u)))) << 30u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 2u)))) << 29u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 3u)))) << 28u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 4u)))) << 27u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 5u)))) << 26u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 6u)))) << 25u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 7u)))) << 24u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 8u)))) << 23u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 9u)))) << 22u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 10u)))) << 21u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 11u)))) << 20u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 12u)))) << 19u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 13u)))) << 18u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 14u)))) << 17u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 15u)))) << 16u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 16u)))) << 15u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 17u)))) << 14u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 18u)))) << 13u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 19u)))) << 12u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 20u)))) << 11u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 21u)))) << 10u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 22u)))) << 9u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 23u)))) << 8u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 24u)))) << 7u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 25u)))) << 6u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 26u)))) << 5u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 27u)))) << 4u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 28u)))) << 3u)) | (((tUInt32)((tUInt8)((tUInt8)1u & (DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 29u)))) << 2u)) | (((tUInt32)((tUInt8)(DEF_IF_lfsr_r_BIT_4_1_THEN_0_CONCAT_IF_lfsr_r_BIT__ETC___d107 >> 30u))) << 1u)) | (tUInt32)((tUInt8)0u);
  DEF_NOT_lfsr_r_SRL_lfsr_r_BITS_4_TO_0_8_9_EQ_IF_lf_ETC___d157 = !(DEF_logicalExpected__h199 == DEF_logicalDUT__h200) || !(DEF_logicalLeftExpected__h201 == DEF_logicalLeftDUT__h202);
  DEF_x__h25155 = 65535u & (DEF_x__h25159 + 1u);
  INST_lfsr_r.METH_write(DEF_x__h126);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_lfsr_r_SRL_lfsr_r_BITS_4_TO_0_8_9_EQ_IF_lf_ETC___d157)
      dollar_display(sim_hdl,
		     this,
		     "s,32,5,32,32,5,32,32",
		     &__str_literal_1,
		     DEF_lfsr_r__h13443,
		     DEF_shamt__h196,
		     DEF_logicalExpected__h199,
		     DEF_logicalDUT__h200,
		     DEF_shamt__h196,
		     DEF_logicalLeftExpected__h201,
		     DEF_logicalLeftDUT__h202);
    if (DEF_NOT_lfsr_r_SRL_lfsr_r_BITS_4_TO_0_8_9_EQ_IF_lf_ETC___d157)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_counter_58_EQ_65535___d159)
      dollar_display(sim_hdl, this, "s", &__str_literal_2);
    if (DEF_counter_58_EQ_65535___d159)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_counter.METH_write(DEF_x__h25155);
}


/* Methods */


/* Reset routines */

void MOD_mkTestLogicalLeftBarrelShifter::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_lfsr_r.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestLogicalLeftBarrelShifter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestLogicalLeftBarrelShifter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_counter.dump_state(indent + 2u);
  INST_lfsr_r.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestLogicalLeftBarrelShifter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testShifter", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testShifter", 1u);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_lfsr_r.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestLogicalLeftBarrelShifter::dump_VCD(tVCDDumpType dt,
						  unsigned int levels,
						  MOD_mkTestLogicalLeftBarrelShifter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTestLogicalLeftBarrelShifter::vcd_defs(tVCDDumpType dt,
						  MOD_mkTestLogicalLeftBarrelShifter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_testShifter) != DEF_CAN_FIRE_RL_testShifter)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testShifter, 1u);
	backing.DEF_CAN_FIRE_RL_testShifter = DEF_CAN_FIRE_RL_testShifter;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testShifter) != DEF_WILL_FIRE_RL_testShifter)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testShifter, 1u);
	backing.DEF_WILL_FIRE_RL_testShifter = DEF_WILL_FIRE_RL_testShifter;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testShifter, 1u);
      backing.DEF_CAN_FIRE_RL_testShifter = DEF_CAN_FIRE_RL_testShifter;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testShifter, 1u);
      backing.DEF_WILL_FIRE_RL_testShifter = DEF_WILL_FIRE_RL_testShifter;
    }
}

void MOD_mkTestLogicalLeftBarrelShifter::vcd_prims(tVCDDumpType dt,
						   MOD_mkTestLogicalLeftBarrelShifter &backing)
{
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_lfsr_r.dump_VCD(dt, backing.INST_lfsr_r);
}
